trigger:
- dev
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  dockerHubServiceConnection: 'dockerhub-connection'
  imageRepository: 'belalkhozeim22/spring-boot-app-image'
  dockerfilePath: './Dockerfile'
  tag: '$(Build.BuildId)'
  terraformServiceConnection: 'gke-connection'  # Service connection for GKE
  kubernetesServiceConnection: 'gke-connection'  # Same service connection for Kubernetes deployment
  terraformWorkingDirectory: './infrastructure'

stages:
- stage: Lint
  jobs:
  - job: Lint
    steps:
    - script: echo "Linting the code..."
      displayName: 'Linting'

- stage: UnitTest
  jobs:
  - job: UnitTest
    steps:
    - script: ./gradlew test
      displayName: 'Running Unit Tests'

- stage: SonarQube
  jobs:
  - job: SonarQube
    steps:
    - task: SonarQubePrepare@4
      inputs:
        SonarQube: 'SonarQube service connection'
        scannerMode: 'CLI'
        configMode: 'manual'
        cliProjectKey: 'spring-boot-app'
        cliProjectName: 'spring-boot-app'
    - script: ./gradlew sonarqube
      displayName: 'Running SonarQube Analysis'

- stage: BuildImage
  jobs:
  - job: BuildImage
    steps:
    - task: Docker@2
      inputs:
        containerRegistry: '$(dockerHubServiceConnection)'
        repository: '$(imageRepository)'
        dockerfile: '$(dockerfilePath)'
        tags: |
          $(tag)
          latest

- stage: PushImage
  jobs:
  - job: PushImage
    steps:
    - task: Docker@2
      inputs:
        containerRegistry: '$(dockerHubServiceConnection)'
        repository: '$(imageRepository)'
        command: 'push'
        tags: |
          $(tag)
          latest
