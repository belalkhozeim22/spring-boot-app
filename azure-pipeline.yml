trigger:
- dev
- main

pool: 'gcp host'

variables:
  dockerHubServiceConnection: 'dockerhub-connection'
  imageRepository: 'belalkhozeim22/spring-boot-app-image'
  dockerfilePath: './Dockerfile'
  tag: '$(Build.BuildId)'
  terraformServiceConnection: 'terraform-gcp-connection' #Service connection for GKE
  kubernetesServiceConnection: 'gke-connection' #Same service connection for Kubernetes deployment
  terraformWorkingDirectory: './infrastructure'

stages:
- stage: Lint
  jobs:
  - job: Lint
    displayName: 'Lint Stage'
    steps:
    - script: echo "Linting the code..."
      displayName: 'Linting the code with Checkstyle'


- stage: UnitTest
  jobs:
  - job: UnitTest
    steps:
    - script: |
        chmod +x ./gradlew
        ./gradlew test
      displayName: 'Running Unit Tests'


- stage: SonarQube
  jobs:
  - job: SonarQube
    displayName: 'SonarQube Stage'
    steps:
    #- script: ./gradlew sonarqube
    - script: echo "SonarQube testing"
      displayName: 'Running SonarQube Analysis'


- stage: BuildImage
  jobs:
  - job: BuildImage
    steps:
    - task: Docker@2
      inputs:
        containerRegistry: '$(dockerHubServiceConnection)'
        repository: '$(imageRepository)'
        command: 'build'
        Dockerfile: '$(dockerfilePath)'
        tags: |
          $(tag)
          latest

- stage: PushImage
  jobs:
  - job: PushImage
    steps:
    - task: Docker@2
      inputs:
        containerRegistry: '$(dockerHubServiceConnection)'
        repository: '$(imageRepository)'
        command: 'push'
        Dockerfile: '$(dockerfilePath)'
        tags: |
          $(tag)
          latest


- stage: PullImage
  jobs:
  - job: PullImage
    steps:
    - script: docker pull $(imageRepository):$(tag)
      displayName: 'Pulling Docker Image'



- stage: DeployInfrastructure
  jobs:
  - job: Terraform
    steps:
    - task: TerraformTaskV4@4
      inputs:
        provider: 'gcp'
        command: 'init'
        backendServiceGCP: 'terraform-gcp-connection'
        backendGCPBucketName: 'spring-boot-terraform'
        backendGCPPrefix: 'terraform/state'
  - task: TerraformTaskV4@4
    inputs:
      provider: 'gcp'
      command: 'plan'
      environmentServiceNameGCP: 'terraform-gcp-connection'
- task: TerraformTaskV4@4
  inputs:
    provider: 'gcp'
    command: 'apply'
    environmentServiceNameGCP: 'terraform-gcp-connection'


